[[plugins]]
repo = 'Shougo/vimproc'
if = '''!(has('win32') && has('kaoriya'))'''
build = 'make'

[[plugins]]
repo = 'Shougo/neocomplete.vim'
if = '''!has('nvim')'''
depends = [ 'context_filetype.vim' ]
on_i = 1

[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = '''has('nvim')'''
depends = [ 'context_filetype.vim' ]
on_i = 1

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'osyo-manga/vim-marching'
depends = [ 'neocomplete.vim' ]
on_ft = [ 'c', 'cpp', 'objc', 'objcpp' ]
if = '''!has('nvim')'''
hook_source = '''
  let g:marching_enable_neocomplete = 1
'''

[[plugins]]
repo = 'h1mesuke/vim-alignta'
on_cmd = 'Alignta'
hook_add = '''
  xnoremap <silent> <Leader>t: :Alignta <<0 \ /1<CR>
  xnoremap <silent> <Leader>t, :Alignta << -e ,<CR>
  xnoremap <silent> <Leader>t= :Alignta << -e =<CR>
  xnoremap <silent> <Leader>t> :Alignta << -e =><CR>

  xnoremap <silent> <Leader>T: :Alignta >>0 \ /1<CR>
  xnoremap <silent> <Leader>T, :Alignta >> -e ,<CR>
  xnoremap <silent> <Leader>T= :Alignta >> -e =<CR>
  xnoremap <silent> <Leader>T> :Alignta >> -e =><CR>
'''

[[plugins]]
repo = 'Shougo/echodoc'
on_i = 1

[[plugins]]
repo = 'thinca/vim-quickrun'
depends = [ 'vimproc' ]
on_map = '<Plug>'
hook_add = '''
  nmap <silent> <Leader>r <Plug>(quickrun)
'''
hook_source = '''
  let g:quickrun_config = get(g:, 'quickrun_config', {})
  let g:quickrun_config['_'] = {
    \   'runner': 'vimproc',
    \ }
  let g:quickrun_config['hsp'] = {
    \   'command': 'D:/Documents/tools/hsp3/hscl',
    \   'exec': '%c %s',
    \   'hook/output_encode/encoding': 'cp932',
    \   'outputter': 'error',
    \   'error': 'quickfix',
    \   'errorformat': '%f\(%l)%*[^0-9]%n\ :\ %m',
    \ }
'''

[[plugins]]
repo = 'cohama/vim-hier'
[[plugins]]
repo = 'osyo-manga/shabadou.vim'
[[plugins]]
repo = 'osyo-manga/vim-watchdogs'
depends = [ 'vim-quickrun', 'shabadou.vim', 'vim-hier', ]
on_ft = [ 'c', 'cpanfile', 'cpp', 'javascript', 'perl', 'ruby', ]
on_idle = 1
hook_source = '''
  let g:quickrun_config = get(g:, 'quickrun_config', {})
  " http://this.aereal.org/entry/2013/08/10/005547
  let g:quickrun_config['watchdogs_checker/cpanfile'] = {
    \ 'command' : 'perl',
    \ 'exec' : '%c %o -MModule::CPANfile -e "Module::CPANfile->load(q|%S:p|)"',
    \ 'quickfix/errorformat' : '%m\ at\ %f\ line\ %l%.%#',
    \ }
  let g:quickrun_config['cpanfile/watchdogs_checker'] = {
    \ 'type' : 'watchdogs_checker/cpanfile',
    \ }
  let g:quickrun_config['watchdogs_checker/perl'] = {
    \ 'cmdopt': '-Ilib -Ilocal/lib/perl5',
    \ }

  let g:watchdogs_check_BufWritePost_enable = 1
'''
hook_post_source = '''
  call watchdogs#setup(g:quickrun_config)
'''

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = [ 'css', 'haml', 'html', 'markdown', 'scss', 'tt2html', 'xml', 'xslate', ]
hook_source = '''
  let g:user_emmet_settings = {
  \ 'indentation': '  ',
  \ 'xslate': {
  \   'indentation': '    ',
  \ },
  \ 'tt2html': {
  \   'indentation': '    ',
  \ },
  \ }
'''

[[plugins]]
repo = 'anyakichi/vim-surround'
on_map = [
  '<Plug>Csurround',
  '<Plug>Dsurround',
  '<Plug>ISurround',
  '<Plug>Isurround',
  '<Plug>SurroundRepeat',
  '<Plug>VSurround',
  '<Plug>VgSurround',
  '<Plug>Vgsurround',
  '<Plug>Vsurround',
  '<Plug>Ygssurround',
  '<Plug>Ygsurround',
  '<Plug>Yssurround',
  '<Plug>Ysurround',
]
hook_add = '''
  nmap <unique> ds     <Plug>Dsurround
  nmap <unique> cs     <Plug>Csurround
  nmap <unique> ys     <Plug>Ysurround
  nmap <unique> yS     <Plug>Ysurround$
  nmap <unique> yss    <Plug>Yssurround
  nmap <unique> ygs    <Plug>Ygsurround
  nmap <unique> ygS    <Plug>Ygsurround$
  nmap <unique> ygss   <Plug>Ygssurround
  nmap <unique> ygsgs  <Plug>Ygssurround
  xmap <unique> s      <Plug>Vsurround
  xmap <unique> S      <Plug>VSurround
  xmap <unique> gs     <Plug>Vgsurround
  xmap <unique> gS     <Plug>VgSurround
  imap <unique> <C-S>  <Plug>Isurround
  imap <unique> <C-G>s <Plug>Isurround
  imap <unique> <C-G>S <Plug>ISurround
'''
hook_source = '''
  let g:surround_no_mappings = 1
'''

[[plugins]]
repo = 'LeafCage/yankround.vim'
on_map = '<Plug>'
hook_add = '''
  nmap p <Plug>(yankround-p)
  nmap P <Plug>(yankround-P)
  nmap gp <Plug>(yankround-gp)
  nmap gP <Plug>(yankround-gP)
  nmap <C-p> <Plug>(yankround-prev)
  nmap <C-n> <Plug>(yankround-next)
  xmap p <Plug>(yankround-p)
  xmap gp <Plug>(yankround-gp)
'''
hook_source = '''
  let g:yankround_use_region_hl = 1
  let g:yankround_region_hl_groupname = 'YankRoundRegion'

  autocmd vimrc_loading ColorScheme * call s:define_region_hl()
  function! s:define_region_hl()
    if &bg=='dark'
      highlight default YankRoundRegion guibg=Brown ctermbg=Brown term=reverse
    else
      highlight default YankRoundRegion guibg=LightRed ctermbg=LightRed term=reverse
    end
  endfunction
'''

[[plugins]]
repo = 'haya14busa/incsearch.vim'
on_map = '<Plug>'
hook_add = '''
  map /  <Plug>(incsearch-forward)
  map ?  <Plug>(incsearch-backward)
  map g/ <Plug>(incsearch-stay)
  map n  <Plug>(incsearch-nohl-n)
  map N  <Plug>(incsearch-nohl-N)
  map *  <Plug>(incsearch-nohl-*)
  map #  <Plug>(incsearch-nohl-#)
  map g* <Plug>(incsearch-nohl-g*)
  map g# <Plug>(incsearch-nohl-g#)
'''
hook_source = '''
  let g:incsearch#magic = '\v'
  let g:incsearch#auto_nohlsearch = 1
'''

[[plugins]]
repo = 'godlygeek/tabular'
on_cmd = 'Tabularize'

[[plugins]]
repo = 'tyru/open-browser.vim'
on_map = '<Plug>(openbrowser'
hook_add = '''
  nmap gx <Plug>(openbrowser-smart-search)
  vmap gx <Plug>(openbrowser-smart-search)

  let g:netrw_nogx = 1
'''

[[plugins]]
repo = 'tyru/open-browser-github.vim'
on_cmd = [
  'OpenGithubFile',
  'OpenGithubIssue',
  'OpenGithubProject',
  'OpenGithubPullReq',
]
depends = 'open-browser.vim'
hook_add = '''
  nnoremap <silent> <Leader>gh :OpenGithubFile<CR>
  vnoremap <silent> <Leader>gh :OpenGithubFile<CR>
'''
hook_source = '''
  let g:openbrowser_github_always_use_commit_hash = 1
  let g:openbrowser_github_url_exists_check = 'ignore'
'''

# Unite / Denite {{{
[[plugins]]
repo = 'Shougo/unite.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = [ 'unite.vim' ]
on_cmd = 'Denite'
hook_add = '''
  nnoremap <C-w><C-w> :<C-u>Denite buffer<CR>
  nnoremap <silent> <Leader>f :<C-u>Denite file_rec<CR>
  nnoremap <silent> <Leader>m :<C-u>Denite unite:oldfiles<CR>
  nnoremap <silent> <Leader>e :<C-u>Denite file_rec/git<CR>
  nnoremap <silent> <Leader>b :<C-u>Denite unite:build<CR>
  nnoremap <silent> <C-^> :<C-u>Denite jump<CR>
  nnoremap <silent> <C-j> :<C-u>Unite -immediately gtags/context<CR>

  nnoremap <silent> <Leader>n :Denite -resume -cursor-pos=+1 -immediately<CR>
  nnoremap <silent> <Leader>p :Denite -resume -cursor-pos=-1 -immediately<CR>
'''
hook_post_source = '''
  call denite#custom#map(
    \ 'insert',
    \ '<C-n>',
    \ '<denite:move_to_next_line>',
    \ 'noremap'
    \)
  call denite#custom#map(
    \ 'insert',
    \ '<C-p>',
    \ '<denite:move_to_previous_line>',
    \ 'noremap'
    \)

  if executable('ag')
    call denite#custom#var('file_rec', 'command',
      \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
  endif
  call denite#custom#alias('source', 'file_rec/git', 'file_rec')
  call denite#custom#var('file_rec/git', 'command',
    \ ['git', 'ls-files', '-co', '--exclude-standard'])
'''

[[plugins]]
repo = 'Shougo/unite-build'
on_source = [ 'unite.vim' ]

[[plugins]]
repo = 'hewes/unite-gtags'
on_source = [ 'unite.vim' ]

[[plugins]]
repo = 'lambdalisue/unite-grep-vcs'
on_source = [ 'unite.vim' ]

[[plugins]]
repo = 'osyo-manga/unite-oldfiles'
if = '''has('nvim') || version >= 800'''
on_source = [ 'unite.vim' ]

# }}}

# File types {{{
[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = [ 'css', 'sass', 'scss', 'markdown' ]

[[plugins]]
repo = 'othree/html5.vim'
on_ft = [ 'html', 'markdown' ]

[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = 'markdown'
hook_source = '''
  let g:vim_markdown_liquid=1
  let g:vim_markdown_frontmatter=1
  let g:vim_markdown_folding_disabled=1
'''

[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = [ 'coffee', 'markdown' ]

[[plugins]]
repo = 'sophacles/vim-processing'
on_ft = 'processing'

[[plugins]]
repo = 'chr4/nginx.vim'
on_ft = 'nginx'

[[plugins]]
repo = 'vim-scripts/gnuplot.vim'
on_ft = 'gnuplot'

[[plugins]]
repo = 'honza/dockerfile.vim'
on_ft = 'dockerfile'

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = [ 'javascript', 'markdown' ]

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = 'typescript'

[[plugins]]
repo = 'clausreinke/typescript-tools.vim'
on_ft = 'typescript'

[[plugins]]
repo = 'c9s/perlomni.vim'
on_ft = [ 'perl' ]
hook_add = '''
  let $PATH.=':'.dein#get('perlomni.vim')['path'].'/bin'
'''

[[plugins]]
repo = 'vim-perl/vim-perl'
on_ft = [ 'perl', 'tt2html' ]

[[plugins]]
repo = 'motemen/xslate-vim'
on_ft = 'xslate'

[[plugins]]
repo = 'moznion/vim-cpanfile'
on_ft = 'cpanfile'

[[plugins]]
repo = 'fatih/vim-go'
on_cmd = [
  'GoAlternatej',
  'GoCallees',
  'GoCoverage',
  'GoDef',
  'GoDoc',
  'GoErrCheck',
  'GoFmt',
  'GoImplements',
  'GoImport',
  'GoInstall',
  'GoLint',
  'GoLint',
  'GoMetaLinter',
  'GoPath',
  'GoPlay',
  'GoReferrers',
  'GoRename',
  'GoRun',
  'GoTestFunc',
  'GoVet',
]
on_ft = 'go'
hook_add = '''
  nnoremap <silent> <Leader>ga :<C-u>GoAlternate<CR>
'''

[[plugins]]
repo = 'zchee/deoplete-go'
depends = [ 'deoplete.nvim' ]
on_ft = 'go'
if = '''has('nvim')'''
hook_source = '''
  let g:deoplete#sources#go#align_class = 1
  let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
  let g:deoplete#sources#go#package_dot = 1
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'mxw/vim-jsx'
on_ft = 'javascript'

[[plugins]]
repo = 'posva/vim-vue'
on_ft = 'vue'

[[plugins]]
repo = 'stephpy/vim-yaml'
on_ft = 'yaml'
# }}}
