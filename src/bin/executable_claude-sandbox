#!/usr/bin/env ruby
# frozen_string_literal: true

# https://github.com/nekketsuuu/config/blob/master/bin/sandbox-claude

# Run Claude Code in a sandbox context.
# This script is meant to be run on macOS.
#
# macOS has an undocumented feature called "sandbox-exec" for limiting the capabilities of applications ("seatbelt").
# This script generates a sandbox policy file and runs the Claude Code CLI with it.
#
# Usage:
#   sandbox-claude [options] <command> [args...]
#
# The args are passed to the Claude Code CLI.

# I used the following pages to learn about sandbox-exec. Thank you all:
#
# - https://blog.syum.ai/entry/2025/04/27/232946
# - https://mybyways.com/blog/run-code-in-a-macos-sandbox
# - https://github.com/Homebrew/brew/blob/a36f8af593df2c23a19e66f11b23a9adc51b18de/Library/Homebrew/sandbox.rb
# - https://github.com/openai/codex/blob/abcca30d93d89197405ec56782e146f7a776297d/codex-cli/src/utils/agent/sandbox/macos-seatbelt.ts
# - https://github.com/google-gemini/gemini-cli/blob/9ff3592e01b8f7cd2c30d35b65ee132c37631bc6/packages/cli/src/utils/sandbox-macos-restrictive-open.sb
# - https://reverse.put.as/wp-content/uploads/2011/09/Apple-Sandbox-Guide-v1.0.pdf

require "tmpdir"
require "open3"

# To allow writing to the parent .git directory even if the current directory is in a git sub-worktree
def git_common_dir
  return @git_common_dir if defined?(@git_common_dir)

  # https://git-scm.com/docs/git-worktree#_details
  #
  # > Each linked worktree has a private sub-directory in the repository’s $GIT_DIR/worktrees directory.
  # > ...
  # > Within a linked worktree, $GIT_DIR is set to point to this private directory (e.g. /path/main/.git/worktrees/test-next
  # > in the example) and $GIT_COMMON_DIR is set to point back to the main worktree’s $GIT_DIR (e.g. /path/main/.git).
  output, status = Open3.capture2("git", "rev-parse", "--git-common-dir")
  @git_common_dir = status.success? ? File.expand_path(output.chomp) : nil
end

# Policy for sandbox-exec.
#
# - Allow-list style
# - Almost read-only
# - Allow operations under the current directory
# - Allow installation of packages of Ruby, Node.js, etc.
# - Allow executing binaries
#
# https://reverse.put.as/wp-content/uploads/2011/09/Apple-Sandbox-Guide-v1.0.pdf
POLICY = <<~POLICY
  ; This file is auto-generated by #{$PROGRAM_NAME}

  (version 1)

  ; XXX: Is this working?
  ;
  ; It seems that, despite this config, the denied logs are still collected.
  ; The logs are shown in Console.app or `log stream --style compact --predicate 'sender=="Sandbox"'`.
  (debug deny)

  (deny default)

  ; /System/Library/Sandbox/Profiles/system.sb
  ; It appears that this is a basic policy for applications (actually this is imported from application.sb)
  ; This allows access to some standard devices such as /dev/null and /dev/urandom,
  ; and allows to run sysctl-read, which is required to run Claude Code.
  (import "system.sb")

  (allow file-read*)

  ; XXX: By disabling read access to ssh keys, we can't run `git push` for ssh origins.
  ; Possible workaround: How about using an independent MCP server for git operations?
  (deny file-read* (subpath "#{File.join(ENV.fetch("HOME"), ".ssh")}"))

  (allow process-exec)
  (allow process-fork)

  ; Allow operating processes in the same sandbox, such as child processes and the parent process itself (e.g., EPIPE)
  (allow signal (target same-sandbox))

  (allow file-write-data
    (literal "/dev/stderr")
    (literal "/dev/stdout"))
  (allow file-write*
    (subpath "#{Dir.pwd}")
    #{git_common_dir ? "(subpath \"#{git_common_dir}\")" : ""}
    (subpath "/private/tmp")
    (subpath "/private/var/tmp")
    (regex #"^/private/var/folders/[^/]+/[^/]+/[C,T]"))

  ; For Claude Code and languages
  (allow file-write*
    (literal "#{File.join(ENV.fetch("HOME"), ".claude.json")}")
    (literal "#{File.join(ENV.fetch("HOME"), ".yarnrc")}")
    (subpath "#{File.join(ENV.fetch("HOME"), ".bundle")}")
    (subpath "#{File.join(ENV.fetch("HOME"), ".cache")}")
    (subpath "#{File.join(ENV.fetch("HOME"), ".cargo")}")
    (subpath "#{File.join(ENV.fetch("HOME"), ".claude")}")
    (subpath "#{File.join(ENV.fetch("HOME"), ".gem")}")
    (subpath "#{File.join(ENV.fetch("HOME"), ".npm")}")
    (subpath "#{File.join(ENV.fetch("HOME"), ".rbenv")}")
    (subpath "#{File.join(ENV.fetch("HOME"), ".rustup")}")
    (subpath "#{File.join(ENV.fetch("HOME"), ".volta")}")
    (subpath "#{File.join(ENV.fetch("HOME"), ".yarn")}"))

  ; It appears that the network filter can be used only like `localhost:*` or `*:443`,
  ; especially we cannot filter the network by domain names, according to the reverse engineering PDF
  (allow network-outbound)

  ; In order to utilize the Docker network, intentionally allow binds not only to localhost,
  ; but also to all local network interfaces and all UNIX sockets
  (allow network-bind)

  ; For local servers such as developing Rails servers or Mairu
  #{ENV.fetch("ALLOW_NETWORK_INBOUND", "0") == "1" ? "" : ";"}(allow network-inbound (local udp) (local tcp))

  ; Allow terminal access for React Ink
  (allow file-ioctl (regex #"^/dev/tty.*"))

  ; Bundler tries to write via TTY when running `bundle install`
  (allow file-write-data (regex #"^/dev/tty.*"))

  ; sysmond is required for pgrep
  (allow mach-lookup (global-name "com.apple.sysmond"))

  ; rustup needs the following
  (allow mach-lookup (global-name "com.apple.SystemConfiguration.configd"))

  ; Some Rust programs require the following for TLS certificates
  (allow system-socket
    (require-all
      (socket-domain 32) ; PF_SYSTEM / AF_SYSTEM
      (socket-protocol 2))) ; SYSPROTO_CONTROL
  (allow mach-lookup (global-name "com.apple.SecurityServer"))
POLICY

# Don't rely on $PATH for safety.
SANDBOX_EXEC = "/usr/bin/sandbox-exec"

def verbose?
  ENV.fetch("VERBOSE", "0") == "1"
end

if __FILE__ == $PROGRAM_NAME
  if ENV.fetch("HOME").empty?
    $stderr.puts "ERROR: HOME environment variable is not set"
    exit 1
  end

  Dir.mktmpdir("sandbox-claude") do |tmpdir|
    seatbelt = File.new(File.join(tmpdir, "claude.sb"), "wx")
    seatbelt.write(POLICY)
    seatbelt.close

    puts "DEBUG: Using sandbox policy file: #{seatbelt.path}" if verbose?

    pid = Process.spawn SANDBOX_EXEC, "-f", seatbelt.path, "claude", *ARGV
    _, status = Process.waitpid2(pid)
    unless status.success?
      exit(status.exitstatus || 1)
    end
  end
end
