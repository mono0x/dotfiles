[[plugins]]
repo = 'Shougo/neocomplete.vim'
lazy = 1
on_i = 1
if = '''!has('nvim')'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
lazy = 1
on_i = 1
if = '''has('nvim')'''

[[plugins]]
repo = 'osyo-manga/vim-marching'
on_ft = [ 'c', 'cpp', 'objc', 'objcpp' ]

[[plugins]]
repo = 'h1mesuke/vim-alignta'
on_cmd = 'Alignta'

[[plugins]]
repo = 'Shougo/echodoc'
on_i = 1

[[plugins]]
repo = 'thinca/vim-quickrun'
on_map = '<Plug>'
hook_add = '''
  nmap <silent> <Leader>r <Plug>(quickrun)
'''
hook_source = '''
  let g:quickrun_config = get(g:, 'quickrun_config', {})
  let g:quickrun_config['_'] = {
    \   'runner': 'vimproc',
    \ }
  let g:quickrun_config['hsp'] = {
    \   'command': 'D:/Documents/tools/hsp3/hscl',
    \   'exec': '%c %s',
    \   'hook/output_encode/encoding': 'cp932',
    \   'outputter': 'error',
    \   'error': 'quickfix',
    \   'errorformat': '%f\(%l)%*[^0-9]%n\ :\ %m',
    \ }
'''

[[plugins]]
repo = 'cohama/vim-hier'
[[plugins]]
repo = 'osyo-manga/shabadou.vim'
[[plugins]]
repo = 'osyo-manga/vim-watchdogs'
depends = [ 'vim-quickrun', 'shabadou.vim', 'vim-hier', ]
on_ft = [ 'c', 'cpanfile', 'cpp', 'javascript', 'perl', 'ruby', ]
on_idle = 1
hook_source = '''
  let g:quickrun_config = get(g:, 'quickrun_config', {})
  " http://this.aereal.org/entry/2013/08/10/005547
  let g:quickrun_config['watchdogs_checker/cpanfile'] = {
    \ 'command' : 'perl',
    \ 'exec' : '%c %o -MModule::CPANfile -e "Module::CPANfile->load(q|%S:p|)"',
    \ 'quickfix/errorformat' : '%m\ at\ %f\ line\ %l%.%#',
    \ }
  let g:quickrun_config['cpanfile/watchdogs_checker'] = {
    \ 'type' : 'watchdogs_checker/cpanfile',
    \ }
  let g:quickrun_config['watchdogs_checker/perl'] = {
    \ 'cmdopt': '-Ilib -Ilocal/lib/perl5',
    \ }

  let g:watchdogs_check_BufWritePost_enable = 1
'''
hook_post_source = '''
  call watchdogs#setup(g:quickrun_config)
'''

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = [ 'css', 'haml', 'html', 'markdown', 'scss', 'tt2html', 'xml', 'xslate', ]

[[plugins]]
repo = 'anyakichi/vim-surround'
on_map = [
  '<Plug>Csurround',
  '<Plug>Dsurround',
  '<Plug>ISurround',
  '<Plug>Isurround',
  '<Plug>SurroundRepeat',
  '<Plug>VSurround',
  '<Plug>VgSurround',
  '<Plug>Vgsurround',
  '<Plug>Vsurround',
  '<Plug>Ygssurround',
  '<Plug>Ygsurround',
  '<Plug>Yssurround',
  '<Plug>Ysurround',
]

[[plugins]]
repo = 'LeafCage/yankround.vim'
on_map = '<Plug>'

[[plugins]]
repo = 'haya14busa/incsearch.vim'
on_map = '<Plug>'

[[plugins]]
repo = 'haya14busa/incsearch-fuzzy.vim'
on_map = '<Plug>'

[[plugins]]
repo = 'haya14busa/vim-migemo'
on_func = 'migemo#'

[[plugins]]
repo = 'haya14busa/incsearch-migemo.vim'
on_map = '<Plug>'

[[plugins]]
repo = 'godlygeek/tabular'
on_cmd = 'Tabularize'

[[plugins]]
repo = 'tyru/open-browser.vim'
on_map = '<Plug>(openbrowser'
hook_add = '''
  nmap gx <Plug>(openbrowser-smart-search)
  vmap gx <Plug>(openbrowser-smart-search)
'''
hook_source = '''
  let g:netrw_nogx = 1
'''

[[plugins]]
repo = 'tyru/open-browser-github.vim'
on_cmd = [
  'OpenGithubFile',
  'OpenGithubIssue',
  'OpenGithubProject',
  'OpenGithubPullReq',
]
depends = 'open-browser.vim'
hook_add = '''
  nnoremap <silent> <Leader>gh :OpenGithubFile<CR>
  vnoremap <silent> <Leader>gh :OpenGithubFile<CR>
'''
hook_source = '''
  let g:openbrowser_github_always_use_commit_hash = 1
  let g:openbrowser_github_url_exists_check = 'ignore'
'''

# Unite {{{
[[plugins]]
repo = 'Shougo/unite.vim'
on_cmd = 'Unite'
hook_add = '''
  nnoremap <Leader>w :<C-u>Unite -buffer-name=files buffer<CR>
  nnoremap <C-w><C-w> :<C-u>Unite -buffer-name=files buffer<CR>
  nnoremap <silent> <Leader>f :<C-u>UniteWithCurrentDir file_mru file file/new -hide-source-names<CR>
  nnoremap <silent> <Leader>m :<C-u>Unite file_mru -hide-source-names<CR>
  nnoremap <silent> <Leader>e :<C-u>call <SID>unite_smart_file_rec()<CR>
  nnoremap <silent> <Leader>E :<C-u>Unite file_rec/async<CR>
  nnoremap <silent> <Leader>o :<C-u>Unite outline<CR>
  nnoremap <silent> <Leader>b :<C-u>Unite -no-start-insert build<CR>
  nnoremap <silent> <Leader>gg :<C-u>call <SID>unite_smart_grep()<CR>
  nnoremap <silent> <C-^> :<C-u>Unite jump<CR>
  nnoremap <silent> <C-j> :<C-u>Unite -immediately -no-start-insert gtags/context<CR>

  function! s:unite_smart_file_rec()
    if isdirectory(getcwd() . "/.git")
      Unite file_rec/git
    else
      Unite file_rec/async
    endif
  endfunction

  function! s:unite_smart_grep()
    if unite#sources#grep_git#is_available()
      Unite -no-start-insert grep/git:.
    elseif unite#sources#grep_hg#is_available()
      Unite -no-start-insert grep/hg:.
    else
      Unite -no-start-insert grep:.
    endif
  endfunction

  function! s:unite_my_settings()
    imap <buffer><expr> j unite#smart_map('j', '')

    imap <buffer> <C-w> <Plug>(unite_delete_backward_path)
  endfunction
  autocmd vimrc_loading FileType unite call s:unite_my_settings()
'''
hook_source = '''
  let g:unite_source_gtags_enable_nearness = 1

  if executable('ag')
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts = '--nocolor --nogroup --hidden'
    let g:unite_source_grep_recursive_opt = ''
  endif
'''
hook_post_source = '''
  call unite#custom#source('file,file_rec/git,file_rec/async', 'ignore_globs',
    \ split(&wildignore, ','))

  call unite#custom#source(
    \ 'file,buffer,file_mru', 'matchers',
    \ ['matcher_context'])

  call unite#custom#source(
    \ 'file_rec/async,file_rec/git', 'matchers',
    \ ['matcher_context'])

  call unite#custom#source(
    \ 'file,file_mru,file_rec/async,file_rec/git', 'converters',
    \ ['converter_smart_path', 'converter_file_directory'])

  call unite#custom#profile('default', 'context', {
    \ 'start_insert': 1,
    \ })

  call unite#custom#profile('file,file_mru,file_rec/async,file_rec/git', 'context', {
    \ 'buffer_name': 'files',
    \ })

  call unite#custom#profile('grep,grep/git,grep/hg', 'context', {
    \ 'buffer_name': 'search-buffer',
    \ 'start_insert': 0,
    \ 'quit': 0,
    \ })

  call unite#custom#profile('outline', 'context', {
    \ 'buffer_name': 'outline',
    \ 'start_insert': 0,
    \ 'quit': 0,
    \ 'winwidth': 32,
    \ 'direction': 'botright',
    \ 'vertical': 1,
    \ })
'''

[[plugins]]
repo = 'Shougo/unite-outline'
on_source = [ 'unite.vim' ]

[[plugins]]
repo = 'Shougo/unite-build'
on_source = [ 'unite.vim' ]

[[plugins]]
repo = 'hewes/unite-gtags'
on_source = [ 'unite.vim' ]

[[plugins]]
repo = 'lambdalisue/unite-grep-vcs'
on_source = [ 'unite.vim' ]

# }}}

# File types {{{
[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = [ 'css', 'sass', 'scss', 'markdown' ]

[[plugins]]
repo = 'othree/html5.vim'
on_ft = [ 'html', 'markdown' ]

[[plugins]]
repo = 'joker1007/vim-markdown-quote-syntax'
on_ft = 'markdown'

[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = 'markdown'

[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = [ 'coffee', 'markdown' ]

[[plugins]]
repo = 'sophacles/vim-processing'
on_ft = 'processing'

[[plugins]]
repo = 'evanmiller/nginx-vim-syntax'
on_ft = 'nginx'

[[plugins]]
repo = 'gnuplot.vim'
on_ft = 'gnuplot'

[[plugins]]
repo = 'honza/dockerfile.vim'
on_ft = 'dockerfile'

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = [ 'javascript', 'markdown' ]

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = 'typescript'

[[plugins]]
repo = 'clausreinke/typescript-tools.vim'
on_ft = 'typescript'

[[plugins]]
repo = 'c9s/perlomni.vim'
on_ft = [ 'perl' ]
on_i = 1
hook_add = '''
  let $PATH.=':'.dein#get('perlomni.vim')['path'].'/bin'
'''

[[plugins]]
repo = 'vim-perl/vim-perl'
on_ft = [ 'perl', 'cpanfile', 'tt2html' ]

[[plugins]]
repo = 'motemen/xslate-vim'
on_ft = 'xslate'

[[plugins]]
repo = 'moznion/vim-cpanfile'
on_ft = 'cpanfile'

[[plugins]]
repo = 'fatih/vim-go'
on_cmd = [
  'GoAlternatej',
  'GoCallees',
  'GoCoverage',
  'GoDef',
  'GoDoc',
  'GoErrCheck',
  'GoFmt',
  'GoImplements',
  'GoImport',
  'GoInstall',
  'GoLint',
  'GoLint',
  'GoMetaLinter',
  'GoPath',
  'GoPlay',
  'GoReferrers',
  'GoRename',
  'GoRun',
  'GoTestFunc',
  'GoVet',
]

[[plugins]]
repo = 'zchee/deoplete-go'
on_ft = 'go'
on_i = 1
if = '''has('nvim')'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

# }}}
